ajuser:~/deployments2 $ docker images
REPOSITORY      TAG          IMAGE ID       CREATED        SIZE
lambci/lambda   python3.8    094248252696   6 months ago   524MB
lambci/lambda   nodejs12.x   22a4ada8399c   6 months ago   390MB
lambci/lambda   nodejs10.x   db93be728e7b   6 months ago   385MB
lambci/lambda   python3.7    22b4b6fd9260   6 months ago   946MB
lambci/lambda   python3.6    177c85a10179   6 months ago   894MB
lambci/lambda   python2.7    d96a01fe4c80   6 months ago   763MB
lambci/lambda   nodejs8.10   5754fee26e6e   6 months ago   813MB


#setup ECR to contain your images and use 'view push commands'

ajuser:~/deployments2 $ aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 443602378074.dkr.ecr.eu-central-1.amazonaws.com
WARNING! Your password will be stored unencrypted in /home/ec2-user/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
ajuser:~/deployments2 $ cd kafka-installation5/
ajuser:~/deployments2/kafka-installation5 $ docker build -t my-repo .
Sending build context to Docker daemon  6.656kB
Step 1/5 : FROM openjdk:8
8: Pulling from library/openjdk
1cfaf5c6f756: Pull complete 
c4099a935a96: Pull complete 
f6e2960d8365: Pull complete 
dffd4e638592: Pull complete 
a60431b16af7: Pull complete 
a45752549bd6: Pull complete 
cb487dd08887: Pull complete 
Digest: sha256:5d1f52c5be872d4d460033f37490817698925737c049d987bb8ff834e3a558c3
Status: Downloaded newer image for openjdk:8
 ---> 29f03260fd74
Step 2/5 : RUN cd /opt && curl -OL http://archive.apache.org/dist/kafka/2.2.1/kafka_2.11-2.2.1.tgz && tar -zxvf kafka_2.11-2.2.1.tgz && rm kafka_2.11-2.2.1.tgz
 ---> Running in 46576d694e4a
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 61.0M  100 61.0M    0     0  39.9M      0  0:00:01  0:00:01 --:--:-- 39.9M
kafka_2.11-2.2.1/
kafka_2.11-2.2.1/LICENSE
kafka_2.11-2.2.1/NOTICE
kafka_2.11-2.2.1/bin/

....
Step 3/5 : WORKDIR /opt/kafka_2.11-2.2.1/
 ---> Running in 6ae8c2d6b893
Removing intermediate container 6ae8c2d6b893
 ---> 1c9b6d0e2437
Step 4/5 : COPY start.sh /opt/kafka_2.11-2.2.1/
 ---> 8204078a5ffb
Step 5/5 : CMD ["./start.sh"]
 ---> Running in 387822bce14a
Removing intermediate container 387822bce14a
 ---> f2a463b387f1
Successfully built f2a463b387f1
Successfully tagged my-repo:latest
ajuser:~/deployments2/kafka-installation5 $ docker images
REPOSITORY      TAG          IMAGE ID       CREATED          SIZE
my-repo         latest       f2a463b387f1   19 seconds ago   583MB
openjdk         8            29f03260fd74   7 days ago       514MB
lambci/lambda   python3.8    094248252696   6 months ago     524MB
lambci/lambda   nodejs12.x   22a4ada8399c   6 months ago     390MB
lambci/lambda   nodejs10.x   db93be728e7b   6 months ago     385MB
lambci/lambda   python3.7    22b4b6fd9260   6 months ago     946MB
lambci/lambda   python3.6    177c85a10179   6 months ago     894MB
lambci/lambda   python2.7    d96a01fe4c80   6 months ago     763MB
lambci/lambda   nodejs8.10   5754fee26e6e   6 months ago     813MB
ajuser:~/deployments2/kafka-installation5 $ docker tag my-repo:latest 443602378074.dkr.ecr.eu-central-1.amazonaws.com/my-repo:latest
ajuser:~/deployments2/kafka-installation5 $ docker push 443602378074.dkr.ecr.eu-central-1.amazonaws.com/my-repo:latest
The push refers to repository [443602378074.dkr.ecr.eu-central-1.amazonaws.com/my-repo]
363b43cb1ca7: Pushed 
5c5fcd895173: Pushed 
61ef3b3b77be: Pushed 
e63cb31c0354: Pushed 
c2e2307780ac: Pushed 
7d890913ab69: Pushed 
1235daf38153: Pushed 
62d14713f2e9: Pushed 
c2ddc1bc2645: Pushed 
latest: digest: sha256:f10d63f5dd3c18b66025ae79f3ae862107d0cf73f0870e73a0dc0a250e113f97 size: 2213

#after pushing get the URI
443602378074.dkr.ecr.eu-central-1.amazonaws.com/my-repo:latest

#running pod with your own image
--requests: argument states how many CPU units your deployment pod request when executed, here each pod requests to use 500 cpu milliCPUs.
  This can later be used by metrics server to autoscale deployment
--expose: argument states that deployment should be exposed for external calls
--port: argument states that deployment should open the port and is expecting requests through that port

ajuser:~/deployments2/kafka-installation5 $ kubectl run mykafka --image=443602378074.dkr.ecr.eu-central-1.amazonaws.com/my-repo:latest --requests=cpu=500m --expose --port=9092                                                                                                                                     
service/mykafka created
pod/mykafka created

ajuser:~/deployments2/kafka-installation5 $ kubectl get pods
NAME                             READY   STATUS              RESTARTS   AGE
kafka-broker0-766479dc64-49rcb   1/1     Running             0          60m
mykafka                          0/1     ContainerCreating   0          12s
zk-0                             1/1     Running             0          63m
zk-1                             1/1     Running             0          63m
zk-2                             1/1     Running             0          62m

ajuser:~/deployments2/kafka-installation5 $ kubectl exec mykafka -it /bin/bash
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
root@mykafka:/opt/kafka_2.11-2.2.1# jps

root@mykafka:/opt/kafka_2.11-2.2.1# bin/kafka-topics.sh --list --bootstrap-server localhost:9092

#delete or scale down
ajuser:~/deployments2/kafka-installation5 $ kubectl delete pod mykafka
pod "mykafka" deleted

#other option
$ kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: mykafka-myimage
spec:
  containers:
  - name: mykmyi
    image: my-repo:latest
    imagePullPolicy: Never
EOF
