#Running with a standalone cluster
#testing kafka streams demo application
#code here in :
https://github.com/a0x8o/kafka/blob/master/streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java

#relevant jar
/usr/local/kafka/libs/kafka-streams-examples-2.2.1.jar

#to test this demo streaming application setup a standalone or setup a kafka stream application using IDE and edit 'streamConfigs' Pointing to your kafka cluster

#creating topic for input
hdu@m1:~$ kafka-topics.sh --create     --bootstrap-server localhost:9092     --replication-factor 3     --partitions 3 --topic streams-plaintext-input
hdu@m1:~$ kafka-topics.sh --list --bootstrap-server m1:9092
__consumer_offsets
streams-plaintext-input
topic1
topic2
topic3
topic4
topic5
topic6

#creating topic for wordcount output
hdu@m1:~$ kafka-topics.sh --create     --bootstrap-server localhost:9092     --replication-factor 3     --partitions 3 --topic streams-wordcount-output  --config cleanup.policy=compact 
hdu@m1:~$ kafka-topics.sh --list --bootstrap-server localhost:9092
__consumer_offsets
streams-plaintext-input
streams-wordcount-output
topic1
topic2
topic3
topic4
topic5
topic6

hdu@m1:~$ kafka-topics.sh --bootstrap-server localhost:9092 --describe 
Topic:topic1	PartitionCount:1	ReplicationFactor:1	Configs:segment.bytes=1073741824
	Topic: topic1	Partition: 0	Leader: 2	Replicas: 2	Isr: 2
Topic:topic2	PartitionCount:1	ReplicationFactor:1	Configs:segment.bytes=1073741824
	Topic: topic2	Partition: 0	Leader: 1	Replicas: 1	Isr: 1
Topic:streams-plaintext-input	PartitionCount:3	ReplicationFactor:3	Configs:segment.bytes=1073741824
	Topic: streams-plaintext-input	Partition: 0	Leader: 2	Replicas: 2,1,3	Isr: 2,1,3
	Topic: streams-plaintext-input	Partition: 1	Leader: 3	Replicas: 3,2,1	Isr: 3,2,1
	Topic: streams-plaintext-input	Partition: 2	Leader: 1	Replicas: 1,3,2	Isr: 1,3,2
Topic:topic5	PartitionCount:1	ReplicationFactor:2	Configs:segment.bytes=1073741824
	Topic: topic5	Partition: 0	Leader: 2	Replicas: 2,3	Isr: 2,3
Topic:topic6	PartitionCount:3	ReplicationFactor:3	Configs:segment.bytes=1073741824
	Topic: topic6	Partition: 0	Leader: 1	Replicas: 1,3,2	Isr: 1,2,3
	Topic: topic6	Partition: 1	Leader: 2	Replicas: 2,1,3	Isr: 2,1,3
	Topic: topic6	Partition: 2	Leader: 2	Replicas: 3,2,1	Isr: 2,1,3
Topic:topic3	PartitionCount:1	ReplicationFactor:1	Configs:segment.bytes=1073741824
	Topic: topic3	Partition: 0	Leader: 1	Replicas: 1	Isr: 1
Topic:topic4	PartitionCount:1	ReplicationFactor:3	Configs:segment.bytes=1073741824
	Topic: topic4	Partition: 0	Leader: 2	Replicas: 2,3,1	Isr: 1,2,3
Topic:streams-wordcount-output	PartitionCount:3	ReplicationFactor:3	Configs:cleanup.policy=compact,segment.bytes=1073741824
	Topic: streams-wordcount-output	Partition: 0	Leader: 3	Replicas: 3,1,2	Isr: 3,1,2
	Topic: streams-wordcount-output	Partition: 1	Leader: 1	Replicas: 1,2,3	Isr: 1,2,3
	Topic: streams-wordcount-output	Partition: 2	Leader: 2	Replicas: 2,3,1	Isr: 2,3,1

#if stand alone cluster
kafka-run-class.sh org.apache.kafka.streams.examples.wordcount.WordCountDemo

#after starting wordcount application

#The demo application will read from the input topic streams-plaintext-input, perform the computations of the WordCount algorithm on each of the read messages, and continuously write its current results to the output topic streams-wordcount-output.

#start producer
kafka-console-producer.sh --bootstrap-server localhost:9092 --topic streams-plaintext-input

#reading from output topic
kafka-console-consumer.sh --bootstrap-server localhost:9092 \
    --topic streams-wordcount-output \
    --from-beginning \
    --formatter kafka.tools.DefaultMessageFormatter \
    --property print.key=true \
    --property print.value=true \
    --property key.deserializer=org.apache.kafka.common.serialization.StringDeserializer \
    --property value.deserializer=org.apache.kafka.common.serialization.LongDeserializer

refer:https://kafka.apache.org/25/documentation/streams/quickstart


--------------------
#running on a distributed cluster
--Follow instructions in 'Running_streaming_app.txt'
--An already ready to use jar can be found in this folder

