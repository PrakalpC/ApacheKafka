#Task1
setup eks cluster
ajuser:~/environment $ kubectl get nodes
NAME                                              STATUS   ROLES    AGE     VERSION
ip-192-168-14-24.eu-central-1.compute.internal    Ready    <none>   9m52s   v1.19.13-eks-8df270
ip-192-168-24-50.eu-central-1.compute.internal    Ready    <none>   9m49s   v1.19.13-eks-8df270
ip-192-168-36-240.eu-central-1.compute.internal   Ready    <none>   9m49s   v1.19.13-eks-8df270
ip-192-168-90-85.eu-central-1.compute.internal    Ready    <none>   9m51s   v1.19.13-eks-8df270

ajuser:~/environment $ kubectl get pods
No resources found in default namespace.

ajuser:~/environment $ kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.100.0.1   <none>        443/TCP   22m

Once cluster is up
Step 1: Using cloud9 instance with pre-installed docker and running container on this instance
> download kafka-installation5 from git
> this contains Dockerfile to build your own image
> here the image will have zk and kafka both in one image
> when we run this image to start cluster, it will start 1 container and 2 processes i.e. 
  kafka and zk running within same container

$~/kafka-installation5 $ docker build . -t kafka:2.11
$~/kafka-installation5 $ docker images
REPOSITORY      TAG          IMAGE ID       CREATED          SIZE
kafka           2.11         d052b5d3f59f   28 seconds ago   583MB
openjdk         8            29f03260fd74   4 days ago       514MB
lambci/lambda   python3.8    094248252696   6 months ago     524MB
lambci/lambda   nodejs12.x   22a4ada8399c   6 months ago     390MB
lambci/lambda   nodejs10.x   db93be728e7b   6 months ago     385MB
lambci/lambda   python3.7    22b4b6fd9260   6 months ago     946MB
lambci/lambda   python3.6    177c85a10179   6 months ago     894MB
lambci/lambda   python2.7    d96a01fe4c80   6 months ago     763MB
lambci/lambda   nodejs8.10   5754fee26e6e   6 months ago     813MB

~/kafka-installation5 $ docker run -dit --name kafka-cluster kafka:2.11
f7891d8639a315821e9cfc21d8baca5b414b64974353228f19c8ad047b608d85

~/kafka-installation5 $ docker container ls
CONTAINER ID   IMAGE        COMMAND        CREATED         STATUS         PORTS     NAMES
f7891d8639a3   kafka:2.11   "./start.sh"   6 seconds ago   Up 5 seconds             kafka-cluster

~/kafka-installation5 $ docker exec -it kafka-cluster /bin/bash
root@f7891d8639a3:/opt/kafka_2.11-2.2.1# ls
LICENSE  NOTICE  bin  config  libs  logs  site-docs  start.sh

root@f7891d8639a3:/opt/kafka_2.11-2.2.1# bin/kafka-topics.sh --list --bootstrap-server localhost:9092

root@f7891d8639a3:/opt/kafka_2.11-2.2.1# jps
947 Jps
309 Kafka
9 QuorumPeerMain

root@f7891d8639a3:/opt/kafka_2.11-2.2.1# exit
exit

~/kafka-installation5 $ docker container stop kafka-cluster

~/kafka-installation5 $ docker container ls
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

#Now image does exist
~/kafka-installation5 $ docker images
REPOSITORY      TAG          IMAGE ID       CREATED         SIZE
kafka           2.11         d052b5d3f59f   7 minutes ago   583MB

Step2:Running a container using our pre-built image using docker-compose
--not needed as we will let EKS do it for us via YAML file

Step3: Running container using our image on eks cluster
--not needed as of now, can be done ( same as example of running a kafka-client in 1/multiple pods)

Step4: Running containers using image from web i.e. running a zk-ensemble on EKS

Step 5: Running 1 or multiple kafka brokers to connect to our zk processes running within containers within pods


